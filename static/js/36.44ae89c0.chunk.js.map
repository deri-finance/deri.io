{"version":3,"sources":["utils/graph_api.js","pages/Leaderboard/Leaderboard.tsx"],"names":["graphQLClient","GraphQLClient","require","graph_request_test","mutation","variables","request","inject","observer","useState","rankingsList","setRankingsList","accountDays","setAccountDays","listDays","setListDays","accountInfo","setAccountInfo","account","useWallet","loadList","useCallback","query","gql","timestamp","date","Date","now","getTime","timeDay","chainId","fromTimestamp","parseInt","String","data","tradePnl","length","list","slice","getAccountInfo","tradeFee","pnl","notional","useEffect","className","classnames","active","onClick","DeriNumberFormat","prefix","value","decimalScale","map","item","index","Icon","token","width","undefined","height","secondary","formatAddress","displayType","up","down"],"mappings":"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","file":"static/js/36.44ae89c0.chunk.js","sourcesContent":["const {GraphQLClient } = require('graphql-request')\nconst graphQLClient = new GraphQLClient(\"https://graph.deri.io/graphql\", {})\nexport function graph_request_test(mutation,variables) {\n    return graphQLClient.request(mutation,variables)\n}","import React, { useState, useEffect } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport DeriNumberFormat from \"../../utils/DeriNumberFormat\";\nimport \"./leaderboard.less\";\nimport Icon from \"../../components/Icon/Icon\";\nimport { gql } from \"graphql-request\";\nimport { graph_request_test } from \"../../utils/graph_api\";\nimport { formatAddress } from \"../../utils/utils\";\nimport { useCallback } from \"react\";\nimport { useWallet } from \"use-wallet\";\n\nfunction Leaderboard() {\n  const [rankingsList, setRankingsList] = useState<any>([]);\n  const [accountDays, setAccountDays] = useState(30);\n  const [listDays, setListDays] = useState(30);\n  const [accountInfo, setAccountInfo] = useState<any>({});\n  const { account } = useWallet();\n  const timeDay: number = 86400;\n  const loadList = useCallback(async () => {\n    let query = gql`\n      query ($chainId: Int!, $fromTimestamp: Int!) {\n        tradePnl(where: { chainId: $chainId, fromTimestamp: $fromTimestamp }) {\n          account\n          chainId\n          liquidationLoss\n          notional\n          pnl\n          tradeFee\n          tradePnl\n        }\n      }\n    `;\n    let timestamp = 0;\n    let date = new Date();\n    let now = date.getTime() / 1000;\n    if (listDays === 7) {\n      timestamp = now - timeDay * 7;\n    }\n    if (listDays === 30) {\n      timestamp = now - timeDay * 30;\n    }\n    let variables = {\n      chainId: 42161,\n      fromTimestamp: parseInt(String(timestamp)),\n    };\n    let data = await graph_request_test(query, variables);\n    if (data.tradePnl.length) {\n      let list = data.tradePnl;\n      list = list.slice(0, 50);\n      setRankingsList(list);\n    }\n  }, [listDays]);\n  const getAccountInfo = useCallback(async () => {\n    let query = gql`\n      query ($chainId: Int!, $fromTimestamp: Int!, $account: String) {\n        tradePnl(\n          where: {\n            account: $account\n            chainId: $chainId\n            fromTimestamp: $fromTimestamp\n          }\n        ) {\n          account\n          chainId\n          liquidationLoss\n          notional\n          pnl\n          tradeFee\n          tradePnl\n        }\n      }\n    `;\n    let timestamp = 0;\n    let date = new Date();\n    let now = date.getTime() / 1000;\n    if (accountDays === 7) {\n      timestamp = now - timeDay * 7;\n    }\n    if (accountDays === 30) {\n      timestamp = now - timeDay * 30;\n    }\n    let variables = {\n      account: account,\n      chainId: 56,\n      fromTimestamp: parseInt(String(timestamp)),\n    };\n    let data = await graph_request_test(query, variables);\n    if (data.tradePnl.length) {\n      let list = data.tradePnl[0];\n      setAccountInfo(list);\n    } else {\n      setAccountInfo({\n        tradeFee: 0,\n        pnl: 0,\n        notional: 0,\n      });\n    }\n  }, [accountDays, account]);\n\n  useEffect(() => {\n    loadList();\n  }, [listDays]);\n  useEffect(() => {\n    if (account) {\n      getAccountInfo();\n    }\n  }, [account, accountDays]);\n  return (\n    <div className=\"Leaderboard\">\n      <div className=\"Leaderboard-box\">\n        <div className=\"my-historical-trading\">\n          <div className=\"title-tab-day\">\n            <div className=\"title-leaderboard\">\n              My Historical Trading Performance\n            </div>\n            <div className=\"tab-day\">\n              <div\n                className={classnames(\"day-btn\", {\n                  active: accountDays === 7,\n                })}\n                onClick={() => {\n                  setAccountDays(7);\n                }}\n              >\n                7 DAYS\n              </div>\n              <div\n                className={classnames(\"day-btn\", {\n                  active: accountDays === 30,\n                })}\n                onClick={() => {\n                  setAccountDays(30);\n                }}\n              >\n                30 DAYS\n              </div>\n            </div>\n          </div>\n          <div className=\"my-info-list\">\n            <div className=\"info-box\">\n              <div className=\"info-num\">\n                {\" \"}\n                <DeriNumberFormat\n                  prefix=\"$ \"\n                  value={accountInfo.notional}\n                  decimalScale={2}\n                />\n              </div>\n              <div className=\"info-title\"> Notional </div>\n            </div>\n            <div className=\"info-box\">\n              <div className=\"info-num\">\n                <DeriNumberFormat\n                  prefix=\"$ \"\n                  value={+accountInfo.tradeFee}\n                  decimalScale={2}\n                />\n              </div>\n              <div className=\"info-title\"> Transaction Fee </div>\n            </div>\n            <div className=\"info-box\">\n              <div className=\"info-num\">\n                {\" \"}\n                <DeriNumberFormat\n                  prefix=\"$ \"\n                  value={+accountInfo.pnl}\n                  decimalScale={2}\n                />\n              </div>\n              <div className=\"info-title\"> PNL </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"rankings\">\n          <div className=\"rankings-title-tab-day\">\n            <div className=\"rankings-title\">Rankings</div>\n            <div className=\"tab-day\">\n              <div\n                className={classnames(\"day-btn\", { active: listDays === 7 })}\n                onClick={() => {\n                  setListDays(7);\n                }}\n              >\n                7 DAYS\n              </div>\n              <div\n                className={classnames(\"day-btn\", { active: listDays === 30 })}\n                onClick={() => {\n                  setListDays(30);\n                }}\n              >\n                30 DAYS\n              </div>\n            </div>\n          </div>\n          <div className=\"rankings-list-title\">\n            <div className=\"rank\">Rank</div>\n            <div className=\"trade\">Trade</div>\n            <div className=\"notional\">Notional</div>\n            <div className=\"transaction-fee\">Transaction Fee</div>\n            <div className=\"pnl\">PNL</div>\n          </div>\n          <div className=\"rankings-list-num\">\n            {rankingsList.map((item, index) => {\n              return (\n                <div className=\"rankings-list-num-box\" key={index}>\n                  <div className=\"rank\">\n                    {index + 1 === 1 && (\n                      <Icon\n                        token=\"topOne\"\n                        width={undefined}\n                        height={undefined}\n                        secondary={undefined}\n                        className={undefined}\n                        onClick={undefined}\n                      />\n                    )}\n                    {index + 1 === 2 && (\n                      <Icon\n                        token=\"topTwo\"\n                        width={undefined}\n                        height={undefined}\n                        secondary={undefined}\n                        className={undefined}\n                        onClick={undefined}\n                      />\n                    )}\n                    {index + 1 === 3 && (\n                      <Icon\n                        token=\"topThree\"\n                        width={undefined}\n                        height={undefined}\n                        secondary={undefined}\n                        className={undefined}\n                        onClick={undefined}\n                      />\n                    )}\n                    {index + 1 > 3 && (\n                      <span className=\"top-num\">{index + 1}</span>\n                    )}\n                  </div>\n                  <div className=\"trade\">{formatAddress(item.account)}</div>\n                  <div className=\"notional\">\n                    ${\" \"}\n                    <DeriNumberFormat\n                      value={item.notional}\n                      displayType=\"text\"\n                      decimalScale={2}\n                    />\n                  </div>\n                  <div className=\"transaction-fee\">\n                    ${\" \"}\n                    <DeriNumberFormat\n                      value={+item.tradeFee}\n                      displayType=\"text\"\n                      decimalScale={2}\n                    />\n                  </div>\n                  <div\n                    className={classnames(\"pnl\", {\n                      up: +item.pnl > 0,\n                      down: +item.pnl < 0,\n                    })}\n                  >\n                    {+item.pnl > 0 ? \"+\" : \"\"}\n                    <DeriNumberFormat\n                      value={+item.pnl}\n                      displayType=\"text\"\n                      decimalScale={2}\n                      prefix=\"$ \"\n                      // allowZero={true}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default inject(\"wallet\")(observer(Leaderboard));\n"],"sourceRoot":""}