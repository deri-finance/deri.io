{"version":3,"sources":["hooks/useContract.ts","pages/Compensation/img/time.svg","pages/Compensation/Compensation.tsx"],"names":["r","contractdescribers","useContract","name","wallet","useWallet","getContract","address","abi","ethereum","useMemo","provider","Web3Provider","Contract","account","getSigner","connectUnchecked","getProviderOrSigner","require","keys","forEach","key","path","split","last","length","substring","indexOf","inject","observer","lang","useState","balance","setBalance","disabled","setDisabled","alert","useAlert","isExist","setIsExist","contract","balanceContract","transactionTitle","processing","success","error","transactionContent","getBalance","isConnected","eqInNumber","detail","chainId","compensations","balances","decimals","console","log","BigNumber","from","_hex","toString","amount","toNumber","click","claim","res","data","message","hash","Emitter","emit","EVENT_TRANS_BEGIN","title","content","wait","receipt","transactionHash","status","EVENT_TRANS_END","context","useEffect","Date","getTime","className","rel","target","href","formatAddress","DeriNumberFormat","value","decimalScale","thousandSeparator","src","timeLogo","alt","Button","fontWeight","label","width","height","fontSize","onClick","bgColor","undefined","selectedBorderColor","position","icon"],"mappings":"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","file":"static/js/30.41979a9c.chunk.js","sourcesContent":["import {Contract,ContractInterface} from '@ethersproject/contracts'\nimport {JsonRpcProvider,JsonRpcSigner,Web3Provider} from '@ethersproject/providers'\nimport { useMemo } from 'react'\nimport { useWallet } from 'use-wallet'\n\nconst contractdescribers = {}\n\nfunction importAll(r){\n  return r.keys().forEach(key => {\n    const path = key.split('/')\n    const last = path[path.length -1]\n    contractdescribers[last.substring(0,last.indexOf('.'))] = r(key)\n  });\n}\n\nimportAll(require.context(`../abis/`,true,/\\.json$/))\n\nexport default function useContract(name : string) : Contract {\n  const wallet = useWallet();\n  const { address ,abi } = getContract(name)\n  const {ethereum } = wallet    \n  return useMemo(() => {\n    if(!address || !abi || !ethereum) return null\n    const provider = new Web3Provider(ethereum,'any')  \n    // provider.on('network',(newNetwork,oldNetwork) => {\n\n    // }) \n    return new Contract(address,abi,getProviderOrSigner(provider,wallet.account))\n  },[address,abi,ethereum]) \n}\n\n// account is not optional\nfunction getSigner(provider: JsonRpcProvider, account: string): JsonRpcSigner {\n  return provider.getSigner(account).connectUnchecked()\n}\n\n// account is optional\nfunction getProviderOrSigner(provider: JsonRpcProvider, account?: string): JsonRpcProvider | JsonRpcSigner {\n  return account ? getSigner(provider, account) : provider\n}\n\nfunction getContract(name : string) : ContractDescriber {\n  return contractdescribers[name]\n}\n\ninterface ContractDescriber {\n  address : string,\n  abi : ContractInterface\n}","export default __webpack_public_path__ + \"static/media/time.0b0bfc0e.svg\";","import React, { useState, useEffect } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport { formatAddress, eqInNumber } from \"../../utils/utils\";\nimport { useAlert } from \"react-alert\";\nimport DeriNumberFormat from \"../../utils/DeriNumberFormat\";\nimport Button from \"../../components/Button/Button\";\nimport timeLogo from \"./img/time.svg\";\nimport \"./compensation.less\";\nimport useContract from \"../../hooks/useContract\";\nimport {\n  EVENT_TRANS_BEGIN,\n  EVENT_TRANS_END,\n} from \"../../utils/Constants\";\nimport Emitter from \"../../utils/Emitter\";\nimport { BigNumber } from \"ethers\"\n\nexport interface Props {\n  wallet: any;\n  lang: any;\n}\n\nfunction Compensation({ wallet, lang }: Props) {\n  const [balance, setBalance] = useState(0);\n  const [disabled, setDisabled] = useState(true);\n  const alert = useAlert();\n  const [isExist, setIsExist] = useState(false);\n  const contract = useContract(\"compensation\");\n  const balanceContract = useContract(\"ERC20USDC\");\n  const transactionTitle = {\n    processing: \"Claim Processing\",\n    success: \"Claim Reward Executed\",\n    error: \"Claim Reward Failed\",\n  };\n  const transactionContent = {\n    success: \"Claim Reward\",\n    error: \"Transaction Failed\",\n  };\n\n  const getBalance = async () => {\n    if (\n      wallet.isConnected() &&\n      contract &&\n      eqInNumber(wallet.detail.chainId, 42161)\n    ) {\n      const balances = await contract.compensations(wallet.detail.account);\n      let decimals = await balanceContract.decimals();\n      console.log(BigNumber.from(balances._hex).toString());\n      let amount = BigNumber.from(balances._hex).toNumber() / 10 ** decimals;\n      if (+amount > 0) {\n        setIsExist(true);\n      } else {\n        setIsExist(false);\n      }\n      setBalance(amount);\n    }\n  };\n\n  const getWalletBalance = async () => {\n    if (+wallet.detail.chainId === 42161 && balanceContract) {\n      let balance = await balanceContract.balanceOf(wallet.detail.account);\n      let decimals = await balanceContract.decimals();\n      balance = BigNumber.from(balance._hex).toNumber() / 10 ** decimals;\n      setBalance(balance);\n    }\n  };\n  const click = async () => {\n    if (wallet.isConnected() && contract && wallet.detail.chainId === 42161) {\n      let res;\n      try {\n        res = await contract.claim();\n      } catch (error) {\n        console.log(error);\n        if (error.error && error.error.data && error.error.data.message) {\n          let message = error.error.data.message;\n          alert.error(message);\n        }\n        return false;\n      }\n      if (res && res.hash) {\n        Emitter.emit(EVENT_TRANS_BEGIN, {\n          title: transactionTitle,\n          content: transactionContent,\n          hash: res.hash,\n        });\n      } else {\n        return false;\n      }\n      const receipt = await res.wait();\n      console.log(\"receipt\", receipt);\n      if (receipt) {\n        console.log(\"receipt\", receipt);\n        if (receipt && receipt.transactionHash) {\n          const hash = receipt.transactionHash;\n          if (receipt.status) {\n            getBalance();\n            // getWalletBalance()\n            setDisabled(true);\n            Emitter.emit(EVENT_TRANS_END, {\n              title: transactionTitle,\n              content: transactionContent,\n              context: { success: true, hash: hash, error: \"error\" },\n            });\n          } else {\n            Emitter.emit(EVENT_TRANS_END, {\n              title: transactionTitle,\n              content: transactionContent,\n              context: { success: false, hash: hash, error: \"error\" },\n            });\n          }\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (wallet.isConnected()) {\n      getBalance();\n      // getWalletBalance()\n    }\n  }, [wallet.chainId, wallet.account]);\n\n  useEffect(() => {\n    if (isExist) {\n      let timestamp = new Date();\n      if (timestamp.getTime() >= 1675814400000) {\n        setDisabled(true);\n      } else {\n        setDisabled(false);\n      }\n    } else {\n      setDisabled(true);\n    }\n  }, [isExist]);\n\n  return (\n    <div className=\"airdrop-box\">\n      <div className=\"airdrop-info\">\n        <div className=\"airdrop-info-box\">\n          <div className=\"airdrop-title\">\n            {/* {lang['title']} */}\n            DERI Compensation Plan\n          </div>\n          <div>\n            A fund has been set up by the treasury to compensate for the loss of\n            liquidity providers due to exploit on 2022-10-28. Refer{\" \"}\n            <a\n              rel=\"noreferrer\"\n              target=\"_blank\"\n              href=\"https://deri-protocol.medium.com/post-mortem-of-the-2022-10-28-attack-on-deri-protocol-3eb4f1ecd49d\"\n            >\n              here\n            </a>{\" \"}\n            for more details.\n          </div>\n          <div className=\"wallet-address\">\n            <span className=\"blue-logo\"></span>\n            {formatAddress(wallet.detail.account)}\n          </div>\n          <div className=\"wallet-balance\">\n            Recovery Amount :{\" \"}\n            <DeriNumberFormat\n              value={balance}\n              decimalScale={2}\n              thousandSeparator={true}\n            />{\" \"}\n            USDC\n          </div>\n\n          <div className=\"airdrop-time position\">\n            <div className=\"time-logo\">\n              <img src={timeLogo} alt=\"\" />\n            </div>\n            <div className=\"time-text\">\n              <div className=\"time-title\">\n                <div>{lang[\"start-time\"]}</div>\n                <div>{lang[\"expire-time\"]}</div>\n              </div>\n              <div>\n                <div>2022-11-08 00:00:00 UTC</div>\n                <div>2023-02-08 00:00:00 UTC</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"claim\">\n            <Button\n              fontWeight=\"bold\"\n              disabled={disabled}\n              label={lang[\"claim\"]}\n              width={277}\n              height={72}\n              fontSize={32}\n              onClick={click}\n              bgColor={undefined}\n              selectedBorderColor={undefined}\n              position={undefined}\n              icon={undefined}\n              className={undefined}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default inject(\"wallet\", \"poolManager\")(observer(Compensation));\n"],"sourceRoot":""}